"""Initialize database

Revision ID: c7d89d28d3e3
Revises: 
Create Date: 2024-02-12 11:34:09.640242

"""
import uuid

import flask_security
import sqlalchemy as sa
from alembic import op
from flask import current_app

# revision identifiers, used by Alembic.
revision = "c7d89d28d3e3"
down_revision = None
branch_labels = None
depends_on = None


def seed_data():
    role_table = sa.sql.table(
        "role",
        sa.sql.column("id", sa.Integer),
        sa.sql.column("name", sa.String),
        sa.sql.column("description", sa.String),
        sa.sql.column("permissions", sa.TEXT),
    )
    op.bulk_insert(
        role_table,
        [
            {
                "id": 1,
                "name": "admin",
                "description": "Admin role",
                "permissions": "admin-read,admin-write,user-read,user-write",
            },
            {
                "id": 2,
                "name": "user",
                "description": "User role",
                "permissions": "user-read,user-write",
            },
            {
                "id": 3,
                "name": "dba",
                "description": "User role",
                "permissions": "dba-read,dba-write",
            },
        ],
    )

    user_table = sa.sql.table(
        "user",
        sa.sql.column("id", sa.Integer),
        sa.sql.column("first_name", sa.String),
        sa.sql.column("email", sa.String),
        sa.sql.column("fs_uniquifier", sa.String),
        sa.sql.column("password", sa.String),
        sa.sql.column("username", sa.String),
        sa.sql.column("active", sa.Boolean),
    )

    op.bulk_insert(
        user_table,
        [
            {
                "id": 1,
                "first_name": "Administrator",
                "email": current_app.config["USER_MAIL"],
                "fs_uniquifier": uuid.uuid4().hex,
                "username": current_app.config["USERNAME"],
                "password": flask_security.hash_password(
                    current_app.config["PASSWORD"]
                ),
                "active": True,
            }
        ],
    )

    roles_users_table = sa.sql.table(
        "roles_users",
        sa.sql.column("user_id", sa.Integer),
        sa.sql.column("role_id", sa.Integer),
    )

    op.bulk_insert(
        roles_users_table,
        [{"user_id": "1", "role_id": 1}],
    )


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "clients",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("public_key", sa.String(), nullable=False),
        sa.Column("private_key", sa.String(), nullable=False),
        sa.Column("preshared_key", sa.String(), nullable=False),
        sa.Column("allocated_ips", sa.String(), nullable=False),
        sa.Column("allowed_ips", sa.String(), nullable=False),
        sa.Column("use_server_dns", sa.Boolean(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "global_settings",
        sa.Column("endpoint_address", sa.String(), nullable=False),
        sa.Column("dns_servers", sa.String(), nullable=False),
        sa.Column("mtu", sa.Integer(), nullable=True),
        sa.Column("persistent_keepalive", sa.Integer(), nullable=True),
        sa.Column("config_file_path", sa.String(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("endpoint_address"),
        sa.UniqueConstraint("config_file_path"),
    )
    op.create_table(
        "role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.Column("permissions", flask_security.datastore.AsaList(), nullable=True),
        sa.Column(
            "update_datetime",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "server",
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("listen_port", sa.Integer(), nullable=False),
        sa.Column("private_key", sa.String(), nullable=False),
        sa.Column("public_key", sa.String(), nullable=False),
        sa.Column("postup", sa.String(), nullable=True),
        sa.Column("postdown", sa.String(), nullable=True),
        sa.Column("update_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("address"),
    )
    op.create_table(
        "setting",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=64), nullable=True),
        sa.Column("value", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("first_name", sa.String(length=255), nullable=True),
        sa.Column("last_name", sa.String(length=255), nullable=True),
        sa.Column("gravatar_url", sa.String(length=2048), nullable=True),
        # sa.Column("fs_webauthn_user_handle", sa.String(length=64), nullable=True),
        # sa.Column(
        #     "mf_recovery_codes", flask_security.datastore.AsaList(), nullable=True
        # ),
        sa.Column("password", sa.String(length=255), nullable=True),
        sa.Column("us_phone_number", sa.String(length=128), nullable=True),
        sa.Column("username", sa.String(length=255), nullable=True),
        sa.Column("us_totp_secrets", sa.Text(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("fs_uniquifier", sa.String(length=64), nullable=False),
        sa.Column("confirmed_at", sa.DateTime(), nullable=True),
        sa.Column("last_login_at", sa.DateTime(), nullable=True),
        sa.Column("current_login_at", sa.DateTime(), nullable=True),
        sa.Column("last_login_ip", sa.String(length=64), nullable=True),
        sa.Column("current_login_ip", sa.String(length=64), nullable=True),
        sa.Column("login_count", sa.Integer(), nullable=True),
        sa.Column("tf_primary_method", sa.String(length=64), nullable=True),
        sa.Column("tf_totp_secret", sa.String(length=255), nullable=True),
        sa.Column("tf_phone_number", sa.String(length=128), nullable=True),
        sa.Column(
            "create_datetime",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "update_datetime",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("fs_uniquifier"),
        # sa.UniqueConstraint("fs_webauthn_user_handle"),
        sa.UniqueConstraint("us_phone_number"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "roles_users",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
    )
    # op.create_table(
    #     "web_authn",
    #     sa.Column("id", sa.Integer(), nullable=False),
    #     sa.Column("credential_id", sa.LargeBinary(length=1024), nullable=False),
    #     sa.Column("public_key", sa.LargeBinary(), nullable=False),
    #     sa.Column("sign_count", sa.Integer(), nullable=True),
    #     sa.Column("transports", flask_security.datastore.AsaList(), nullable=True),
    #     sa.Column("backup_state", sa.Boolean(), nullable=False),
    #     sa.Column("device_type", sa.String(length=64), nullable=False),
    #     sa.Column("extensions", sa.String(length=255), nullable=True),
    #     sa.Column(
    #         "create_datetime",
    #         sa.DateTime(),
    #         server_default=sa.text("(CURRENT_TIMESTAMP)"),
    #         nullable=False,
    #     ),
    #     sa.Column("lastuse_datetime", sa.DateTime(), nullable=False),
    #     sa.Column("name", sa.String(length=64), nullable=False),
    #     sa.Column("usage", sa.String(length=64), nullable=False),
    #     sa.Column("user_id", sa.Integer(), nullable=False),
    #     sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
    #     sa.PrimaryKeyConstraint("id"),
    # )
    # with op.batch_alter_table("web_authn", schema=None) as batch_op:
    #     batch_op.create_index(
    #         batch_op.f("ix_web_authn_credential_id"), ["credential_id"], unique=True
    #     )

    # ### end Alembic commands ###

    # Insert default values to the database
    seed_data()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("web_authn", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_web_authn_credential_id"))

    op.drop_table("web_authn")
    op.drop_table("roles_users")
    op.drop_table("user")
    op.drop_table("setting")
    op.drop_table("server")
    op.drop_table("role")
    op.drop_table("global_settings")
    op.drop_table("clients")
    # ### end Alembic commands ###
